(define (problem 8) 
(:domain RedCar)
(:objects


 red-car yellow-car brown-car white-gray-car green-car pink-car - horizontalCar
 orange-car purple-car blue-sky-car yellow-special-car yellow-hover-car green-hover-car - verticalCar
 yellow-truck purple-truck - horizontalTruck
)
(:init
    (= (x red-car) 2)
(= (y red-car) 2)
(= (x yellow-car) 3)
(= (y yellow-car) 3)
(= (x brown-car) 0)
(= (y brown-car) 4)
(= (x white-gray-car) 0)
(= (y white-gray-car) 3)
(= (x green-car) 0)
(= (y green-car) 0)
(= (x pink-car) 2)
(= (y pink-car) 1)
(= (x orange-car) 5)
(= (y orange-car) 0)
(= (x purple-car) 4)
(= (y purple-car) 1)
(= (x blue-sky-car) 0)
(= (y blue-sky-car) 1)
(= (x yellow-special-car) 4)
(= (y yellow-special-car) 4)
(= (x yellow-hover-car) 3)
(= (y yellow-hover-car) 3)
(= (x green-hover-car) 5)
(= (y green-hover-car) 2)
(= (x yellow-truck) 2)
(= (y yellow-truck) 0)
(= (x purple-truck) 0)
(= (y purple-truck) 5)
    
    ;; Grid boundaries
    (= (min_x) 0)
    (= (max_x) 6)
    (= (min_y) 0)
    (= (max_y) 6)
    
    ;; Clear cells
    (= (clear 0 0) 0)
(= (clear 1 0) 0)
(= (clear 2 0) 0)
(= (clear 3 0) 0)
(= (clear 4 0) 0)
(= (clear 5 0) 0)
(= (clear 0 1) 0)
(= (clear 1 1) 1)
(= (clear 2 1) 0)
(= (clear 3 1) 0)
(= (clear 4 1) 0)
(= (clear 5 1) 0)
(= (clear 0 2) 0)
(= (clear 1 2) 1)
(= (clear 2 2) 0)
(= (clear 3 2) 0)
(= (clear 4 2) 0)
(= (clear 5 2) 0)
(= (clear 0 3) 0)
(= (clear 1 3) 0)
(= (clear 2 3) 1)
(= (clear 3 3) 0)
(= (clear 4 3) 0)
(= (clear 5 3) 0)
(= (clear 0 4) 0)
(= (clear 1 4) 0)
(= (clear 2 4) 1)
(= (clear 3 4) 0)
(= (clear 4 4) 0)
(= (clear 5 4) 1)
(= (clear 0 5) 0)
(= (clear 1 5) 0)
(= (clear 2 5) 0)
(= (clear 3 5) 1)
(= (clear 4 5) 0)
(= (clear 5 5) 1)
)
(:goal (and 
    (= (x red-car) (- (max_x) 2))
    (= (y red-car) 2)
))
)